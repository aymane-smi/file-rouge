type Employee @key(fields: "id") {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    password: String!
    year: Int!
    class: String!
    phone: String!
    haveTicket: Boolean
}

type LoginInfo {
    employee: Employee
    token: String!
}

input CartItem {
    menuId: ID!
    detail_id: ID!
    quantity: Int!
    price: Int!
}

#making queries

type Query {
    getEmployeeById(id: ID! @eq): Employee
        @guard
        @find(model: "App\\Models\\employee")
    getAllEmployee: [Employee]! @guard @all(model: "App\\Models\\employee")
    getEmployeeByYear(year: Int! @eq): [Employee]!
        @all(model: "App\\Models\\employee")
    getEmployeeByClass(class: String! @eq): [Employee]!
        @all(model: "App\\Models\\employee")
    Login(email: String!, password: String!): LoginInfo
}

#making mutations

type Mutation {
    deleteEmployeeById(id: ID!): @guard Employee!
        @delete(model: "App\\Models\\employee")
    EditEmployeeByIdResolver(input: EmployeeEditInput @spread): @guard Employee!
    makeOrder(input: OrderInput! @spread): @guard String!
}

#create inputs

input EmployeeEditInput {
    id: ID!
    first_name: String! @rules(apply: ["required", "filled"])
    last_name: String! @rules(apply: ["required", "filled"])
    phone: String!
    email: String! @rules(apply: ["email"])
    password: String
    year: Int! @rules(apply: ["required", "filled"])
    class: String! @rules(apply: ["required", "filled"])
}

input OrderInput {
    employee_id: ID! @rules(apply: ["required", "filled"])
    restaurant_id: ID!
    first_name: String!
    last_name: String!
    phone: String!
    haveTicket: Boolean!
    detail: [CartItem!]
}
