type Administrator @key(fields: "id") {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    password: String!
}

type AdminInfo {
    administrator: Administrator!
    token: String!
}

#making queries

type Query {
    getAdministratorById(id: ID! @eq): Administrator @find
    AdminLogin(email: String!, password: String!): AdminInfo!
}

#making mutations

type Mutation {
    editAdministratorByIdResolver(
        input: AdministratorEditInput @spread
    ): Administrator!
    addAdministrator(input: AdministratorInput @spread): Administrator!
        @create(model: "App\\Models\\administrator")
    AddComplain(input: Complain @spread): String!

    createEmployee(input: EmployeeInput @spread): String!
}

#create inputs

input AdministratorInput {
    first_name: String! @rules(apply: ["required", "filled"])
    last_name: String! @rules(apply: ["required", "filled"])
    email: String! @rules(apply: ["email"])
    password: String! @rules(apply: ["required", "filled"])
}

input AdministratorEditInput {
    id: ID!
    first_name: String! @rules(apply: ["required", "filled"])
    last_name: String! @rules(apply: ["required", "filled"])
    email: String! @rules(apply: ["email"])
    password: String! @rules(apply: ["required", "filled"])
}

input Complain {
    first_name: String!
    last_name: String!
    description: String!
    image: String
}

input EmployeeInput {
    first_name: String! @rules(apply: ["required", "filled"])
    last_name: String! @rules(apply: ["required", "filled"])
    email: String! @rules(apply: ["email"])
    password: String! @rules(apply: ["required", "filled"])
    year: Int! @rules(apply: ["required", "filled"])
    class: String! @rules(apply: ["required", "filled"])
    phone: String!
    haveTicket: Boolean = false
}
